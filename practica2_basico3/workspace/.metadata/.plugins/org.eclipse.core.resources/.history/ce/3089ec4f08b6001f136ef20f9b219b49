/*
 * Fichero: 	practica2.c
 * Autor: 		Ricardo Panero
 * Fecha:		Noviembre de 2024
 * Descripción: SISTEMAS ELECTRÓNICOS. PRÁCTICA Nº 2.

   Objetivo:

	Utilizando el software Xilinx ISE 14.7 y Xilinx Software Development Kit (SDK) para programar el MicroBlaze,
	se pide implementar un sistema de control de luz y temperatura en una vivienda inteligente.

	Este sistema partirá de una serie de datos proporcionados por diversos sensores,
	como pueden ser la temperatura exterior e interior, la presencia de habitantes en la casa,
	la luz ambiental o el ruido exterior, y accionará diversos controladores que permitirían subir o bajar persianas,
	abrir o cerrar ventanas, y arrancar sistemas de calefacción o de aire acondicionado según se necesite,
	en base a unas normas generales.

	Por tanto, el objetivo del sistema es crear una vivienda inteligente monitorizada por los siguientes componentes y sensores:
	• 1 detector de presencia en la vivienda (ON – OFF).
	• 1 sensor de luz exterior (0 – 100%).
	• 2 sensores de temperatura ambiental, uno interior y otro exterior a la vivienda (0 – 60°C).
	• 1 detector de ruido exterior (0 – 120 dB).

	Y los sistemas que accionaremos serán los siguientes:
	• Luces de la casa, apagando o encendiendo las mismas (ON – OFF).
	• 1 motor para el control de la apertura y cierre de ventanas (0 – 100%).
	• 1 motor para controlar la subida y bajada de persianas (0 – 100%).
	• 1 control de calefacción, controlando la potencia de acción del mismo (0 – 100%).
	• 1 control de aire acondicionado, también con control de potencia de acción (0 – 100%).

	El sistema controlará tanto la activación de las luces de la vivienda como la subida y bajada de persianas para favorecer la entrada de luz
	en función de la cantidad de luz proveniente del exterior, dependiendo de si hay alguien o no en la vivienda.

	Además, controlará la temperatura, manteniendo ésta en un rango de entre 18 y 23°C.

	Para su correcto funcionamiento, el sistema deberá responder de la siguiente forma:
	C1. CASA VACÍA
			Si el detector de presencia no está activo supondremos que la vivienda está vacía,
			por tanto, se mantienen las luces apagadas, las persianas bajadas y las ventanas cerradas.
	C2. ILUMINACIÓN EXTERIOR
			Si el detector de presencia está activo y el detector de luz muestra una luminosidad exterior entre el 75% y el 100%,
				se suben las persianas y se mantienen las luces apagadas.
			Si la luminosidad exterior se encuentra entre el 50% y el 75%,
				subir las persianas y encender las lámparas.
			En caso de que la luminosidad exterior sea inferior al 50%,
				bajar las persianas y encender la iluminación interior.
	C3. VENTANAS Y PERSIANAS ABIERTAS ENTRE 18 Y 23º, VENTANAS CERRADAS EN OTRO CASO
			Cuando la temperatura exterior se encuentre entre 18 y 23°C,
				se deben abrir las ventanas de la vivienda para mantener ésta a la temperatura exterior,
				así como subir las persianas,
				independientemente de la luminosidad exterior.
			Para todo valor de temperatura exterior no perteneciente a este rango,
				mantener las ventanas cerradas y aplicar el siguiente criterio.
	C4. CLIMATIZACIÓN CON VENTANAS CERRADAS SI NO HACE BUENO
			Si la temperatura interior se encuentra por debajo de los 18°C,
				se debe activar la calefacción para alcanzar dicha temperatura.
			Si esta temperatura es superior a 23°C,
				se debe activar el aire acondicionado con el objetivo de llegar a estos 23°C.
			En estos casos, las ventanas deberán estar cerradas, obviamente.
	C5. POTENCIA CLIMATIZACIÓN
		Considerando que las temperaturas en el exterior se encontrarán siempre en un rango de entre 0 y 60°C,
			se debe de activar la calefacción o el aire acondicionado según se ha descrito anteriormente.
			La potencia tanto del aire acondicionado como de la calefacción vendrá determinada por
			la diferencia entre la temperatura objetivo y la temperatura del interior de la vivienda,
			variando de forma lineal según varíe dicha diferencia,
			de forma que la potencia sea máxima cuando la diferencia de temperaturas sea máxima
			y nula cuando la temperatura del interior sea igual a la temperatura objetivo.
	C6. CIERRE VENTANAS (y posible climatización) CON RUIDO
			Siempre que el nivel de ruido exterior sea mayor de 40dB,
			mantener las ventanas cerradas independientemente de la temperatura exterior.


	Interacción del usuario con el sistema:
	U1.  CONTROL DE SENSORES POR TECLADO
		La placa de control de la FPGA nos permitirá modificar la temperatura exterior, el nivel de ruido, la cantidad de luz y la presencia en la vivienda.
		Q – A: Permitirán subir-bajar la temperatura exterior en saltos de 1°,
				partiendo de un valor inicial de 20°C (preprogramado al inicio del sistema),
				controlando los valores mínimos y máximos posibles.
		W – S: Permitirán subir-bajar la temperatura interior en saltos de 1°,
				partiendo de un valor inicial de 20°C (preprogramado al inicio del sistema),
				controlando los valores mínimos y máximos posibles.
		E – D: Permitirán subir-bajar el nivel de ruido en saltos de 1dB,
				partiendo de un valor inicial de 20dB (preprogramado al inicio del sistema),
				controlando los valores mínimos y máximos posibles.
		R – F: Permitirán subir-bajar el porcentaje de luz en saltos de 1%,
				partiendo de un valor inicial de 75% (preprogramado al inicio del sistema),
				controlando los valores mínimos y máximos posibles.
		P: 	  Permitirá controlar la activación / desactivación del detector de presencia (ON – OFF),
				partiendo de un valor inicial de OFF.

	U2a. CONTENIDO PANTALLA
		 	En la pantalla se mostrará toda la información del sistema, que incluye
	 	  		el valor de todos los sensores,
	 	  		así como los sistemas que accionamos para el control de la vivienda, con sus unidades respectivas.

	U2b. ACTUALIZACIÓN PANTALLA
			Cada vez que el usuario modifique algún valor del sensor,
		 	 o bien debido a un cambio en el sistema por tiempo
 	 	 	 o por autoincremento/autodecremento de la temperatura,
		 	 se recalcularán los valores necesarios y se volverá a imprimir toda la información en pantalla.
	U2c. MOVIMIENTO VENTANAS Y PERSIANAS
		 En el caso de las persianas y ventanas, será necesario mostrar tanto si están abiertas o cerradas,
		 	 así como el % de funcionamiento del motor si se está moviendo;
		 	 en este último caso, indicar también si la ventana o persiana estaría abriéndose o cerrándose.
	U2d. Inicialmente se encontrará todo cerrado.

	Restricciones:
		R1. CAMBIO SENSOR PRESENCIA EN 5 SEGUNDOS
			Para suponer un cambio de estado en el sensor de presencia en la vivienda,
			éste deberá estar al menos 5 segundos consecutivos en un nuevo estado (ON u OFF).
			Si vuelve a cambiar al estado previo antes de 5 segundos
				no se debe realizar ninguna acción,
				y el tiempo de cuenta de 5 segundos se resetea.
		R2. ALMACENAMIENTO DE DATOS
			Todo el control y almacenamiento de los datos de los sensores se realizará dentro del propio MicroBlaze:
			detección de presencia, sensor de luz exterior, sensor de temperatura exterior e interior, y detector de ruido exterior.
		R3. También se controlará en el interior del MicroBlaze la acción sobre los motores de las persianas y ventanas para abrirlas y cerrarlas,
			generando un cambio progresivo en los mismos.
			La idea es que el proceso de abrir o cerrar persianas o ventanas se complete en 10 segundos,
			comenzando y terminando con movimientos lentos del motor (poca potencia), y estando al 100% de potencia a mitad del recorrido.
			Igualmente, acompañar estos valores de % de movimiento del motor con indicaciones
				si la ventana se está “CERRANDO” o “ABRIENDO”,
				y en el caso de las persianas si están “SUBIENDO” o “BAJANDO”.
			Al llegar al final de su recorrido se mostrará por pantalla su situación final.
		R4. Se controlará en la parte de la FPGA el cálculo de la potencia correspondiente a los motores de la calefacción y el aire acondicionado,
				proporcionándole el MicroBlaze los datos necesarios, a través de uno o varios GPO de salida,
				para calcular la potencia instantánea del motor en cada caso,
				acompañando los datos con una señal de sincronismo necesaria (“datos_nuevos”)
				que también saldrá por un GPO de salida.
			El valor del % de potencia del motor, una vez calculado, se leerá por un puerto GPI de entrada al MicroBlaze
				cuando el módulo externo así lo indique,
				utilizando para ello una interrupción externa (INTC).
		R5. El alumno será responsable de crear las funciones lineales de control de la potencia de la calefacción y del aire acondicionado para que cumplan con los requisitos establecidos.
				Estos cálculos, como se ha indicado, se realizarán en un único módulo en la parte de la FPGA,
				diseñando el circuito necesario para aceptar los datos desde el MicroBlaze,
				activando el cálculo,
				y ofreciendo los resultados de nuevo al MicroBlaze.
		R6. Igualmente, el alumno deberá implementar en el MicroBlaze un sistema lógico de “autoincrementos” o “autodecrementos”
			cada cierto tiempo en la temperatura interior de la vivienda en caso de abrirse las ventanas y persianas para adecuar la temperatura interna a la externa
			o cuando se activa la calefacción o el aire acondicionado,
			llegando a la temperatura objetivo (18°C en el caso de ser necesario calentar la vivienda y 23°C en el caso de tener que enfriarla).

 */

/*

Observaciones:

Tamaño del código (dec=xxx) debug/release
- Básico 1: 11568/11304
- Básico 2: 13422/12976
- Básico 3: 14504/13808

Mejoras
- Las temperaturas pueden ser negativas

*/
#include "practica2.h"
#define MEJORAS

//==================================== VARIABLES GLOBALES
	//- Hardware de Xilinx
		XIOModule iomodule;

	//- R2. ALMACENAMIENTO DE DATOS
		st_estados 		Estados[NUM_SEN_ACT]; 	// estados de sensores y actuadores
		u8         		Valores[NUM_SEN_ACT]; 	// valor de sensores y potencia de actuadores
		char       		Act_pot_clima; 		  	// potencia de climaticación, puede ser negativa
		st_UI      		ui; 					// interfaz de usuario
		st_Temporizador Tem;



//==================================== GESTIÓN DE REACCIÓN DE ACTUADORES ANTE CAMBIOS EN SENSORES

	//- Calc_Pot_Clima: Petición asíncrona a la FPGA de un nuevo cálculo de la potencia en base a la temperatura interior
		void Calc_Pot_Clima() {
			//- C5. POTENCIA CLIMATIZACIÓN

			//- Si desde la última vez no cambió la temperatura interior, no hace falta volver a recalcular la potencia de climatización
				static char Ultima_temperatura = 0;
				if (Ultima_temperatura == Valores[SEN_TemIn]) {
					return;
				}

			//- Actualizar la temperatura de la última invocación
				Ultima_temperatura = Valores[SEN_TemIn];

			//- Con frío dentro de la casa, calcular la potencia para llegar al a 18 grados (aunque la casa esté vacía o las ventanas abiertas)
				if (Ultima_temperatura<UMBRAL_CALEF) {
					XIOModule_DiscreteWrite(&iomodule, GPO_TEMPERATURAS, MASK_0_CAL | Ultima_temperatura); // dato
					XIOModule_DiscreteWrite(&iomodule, GPO_TEMPERATURAS, MASK_1_CAL | Ultima_temperatura); // pulso
					XIOModule_DiscreteWrite(&iomodule, GPO_TEMPERATURAS, MASK_0_CAL | Ultima_temperatura); // dato
					Tem.ejec_fpga++;
				}

			//- Con calor dentre de la casa, calcular la potencia para llegar a 23 grados
				else if (Ultima_temperatura>UMBRAL_AIREA) {
					XIOModule_DiscreteWrite(&iomodule, GPO_TEMPERATURAS, MASK_0_AIR | Ultima_temperatura); // dato
					XIOModule_DiscreteWrite(&iomodule, GPO_TEMPERATURAS, MASK_1_AIR | Ultima_temperatura); // pulso
					XIOModule_DiscreteWrite(&iomodule, GPO_TEMPERATURAS, MASK_0_AIR | Ultima_temperatura); // dato
					Tem.ejec_fpga++;
				}

			//- Si la temperatura es buena, no hay que climatizar y la potencia es 0 (no hace falta invocar a la fpga)
				else {
					Act_pot_clima = 0;
				}
		}

	//- Manejador respuesta asíncrona del cálculo de potencia
		void Manejador_Pot_Clim (void* ref) {
			Act_pot_clima = XIOModule_DiscreteRead(&iomodule, GPI_POTENCIA);
			Tem.sema_actu = 1; // con la nueva potencia calculada, volver a controlar los actuadores en la siguiente iteración
		}


	//- ControlarActuadores: cambia el estado de los actuadores
	    void ControlarActuadores() {

			//- Omitir el control de actuadores si el semáforo está apagado
				if (!Tem.sema_actu)
					return;

	    	//- Guardar el estado anterior de ventanas y persianas para saber si cambia
	    		st_estados ven_antes, per_antes;
	    		ven_antes = Estados[ACT_Venta];
	    		per_antes = Estados[ACT_Persi];


			//- Apagar el semáforo, aumentar el número de ejecuciones y forzar el refresco de pantalla
				Tem.sema_actu = 0;
				Tem.ejec_actu++;
				Tem.sema_pant = 1;


		    //- C1. CASA VACÍA
		        //- apagar todo
		        	if (Estados[SEN_Prese] == ST_AUSENTE) {
			        	Estados[ACT_Luces] = ST_APAGAR;
			        	Estados[ACT_Venta] = ST_CERRADAS;
			        	Estados[ACT_Persi] = ST_BAJADAS;
			        	Estados[ACT_Calef] = ST_APAGAR;
			        	Estados[ACT_AireA] = ST_APAGAR;
			        }

		    //- C2. ILUMINACIÓN EXTERIOR
		        //- encender las luces si no hay claridad (luz tenue u oscuridad)
			        if (Estados[SEN_Prese]==ST_PRESENTE && Estados[SEN_IluEx]!=ST_CLARIDAD) {
			        	Estados[ACT_Luces] = ST_ENCENDER;
			        }
		        //- bajar las persinas si hay oscuridad
			        if (Estados[SEN_IluEx]!=ST_OSCURIDAD) {
			        	Estados[ACT_Persi] = ST_BAJADAS;
			        }

			//- C3. VENTANAS Y PERSIANAS ABIERTAS ENTRE 18 Y 23º, VENTANAS CERRADAS EN OTRO CASO
		        //- abrir las ventanas y subir las persinas si hace bueno y hay gente en casa
			        if (Estados[SEN_Prese]==ST_PRESENTE && Estados[SEN_TemEx]==ST_HACEBUENO) {
			        	Estados[ACT_Venta] = ST_ABIERTAS;
			        	Estados[ACT_Persi] = ST_SUBIDAS;
			        }
			    //- cerrar las ventanas si no hace bueno
			        else {
			        	Estados[ACT_Venta] = ST_CERRADAS;
			        }

	        // C6. CIERRE VENTANAS (y posible climatización) CON RUIDO
			    //- antes de la climatización, comprobar si hay que cerrar las ventanas con buen tiempo por el ruido
			        if (Estados[SEN_Ruido]==ST_HAYRUIDO) {
			        	Estados[ACT_Venta] = ST_CERRADAS;
			        }

			//- U2c. MOVIMIENTO VENTANAS Y PERSIANAS

				//- inicio de apertura o cierre gradual de ventanas
					if (Estados[ACT_Venta]==ST_ABIERTAS && ven_antes!=ST_ABIERTAS) {
						Estados[ACT_Venta] = ST_ABRIENDO;
					} else if (Estados[ACT_Venta]==ST_CERRADAS && ven_antes!=ST_CERRADAS) {
						Estados[ACT_Venta] = ST_CERRANDO;
					}

				//- inicio de apertura o cierre gradual de persianas
					if (Estados[ACT_Persi]==ST_SUBIDAS && per_antes!=ST_SUBIDAS) {
						Estados[ACT_Persi] = ST_SUBIENDO;
					} else if (Estados[ACT_Persi]==ST_BAJADAS && per_antes!=ST_BAJADAS) {
						Estados[ACT_Persi] = ST_BAJANDO;
					}

			// C4. CLIMATIZACIÓN CON VENTANAS CERRADAS SI NO HACE BUENO
				//- Calcular la potencia de climatización que sería necesaria con la temperatura interior actual
					Calc_Pot_Clima();

			    //- Encender la calefacción y apagar el aire si hace frío dentro y las ventanas están cerradas
 					if (Estados[SEN_Prese]==ST_PRESENTE && Estados[SEN_TemIn]==ST_HACEFRIO && Estados[ACT_Venta]==ST_CERRADAS) {
 						Estados[ACT_Calef] = ST_CALENTAR;
 						Estados[ACT_AireA] = ST_APAGAR;
 						Valores[ACT_Calef] = -Act_pot_clima; // si hace frío, la potencia calculada por la FPGA es negativa
 						Valores[ACT_AireA] = 0;
 					}

				//- Encender el aire y apagar la calefacción hace calor dentro y las ventanas están cerradas
 					else if (Estados[SEN_Prese]==ST_PRESENTE && Estados[SEN_TemIn]==ST_HACECALOR && Estados[ACT_Venta]==ST_CERRADAS) {
 						Estados[ACT_Calef] = ST_APAGAR;
 						Estados[ACT_AireA] = ST_ENFRIAR;
 						Valores[ACT_Calef] = 0;
 						Valores[ACT_AireA] = Act_pot_clima; // si hace calopr, la potencia calculada por la FPGA es positiva
 					}

				//- En cualquier otro caso, apagar la climatización
 					else {
 						Estados[ACT_Calef] = ST_APAGAR;
 						Estados[ACT_AireA] = ST_APAGAR;
						Valores[ACT_Calef] = 0;
						Valores[ACT_AireA] = 0;
 					}

	    } // ControlarActuadores



//==================================== GESTIÓN DE SENSORES
#ifdef MEJORAS
	//- Manejadores de botones para simular la pulsación de teclas de dirección
		void Manejador_BotonDer (void* ref) {
			ui.sig_tecla = TECLA_DER; //- Simulamos que hemos pulsado la tecla del botón derecho (dígito 6)
		}

		void Manejador_BotonIzq (void* ref) {
			ui.sig_tecla = TECLA_IZQ; //- Simulamos que hemos pulsado la tecla del botón izquierdo (dígito 4)
		}

		void Manejador_BotonArr (void* ref) {
			ui.sig_tecla = TECLA_ARR; //- Simulamos que hemos pulsado la tecla del botón arriba (dígito 8)
		}

		void Manejador_BotonAba (void* ref) {
			ui.sig_tecla = TECLA_ABA; //- Simulamos que hemos pulsado la tecla del botón abajo (dígito 2)
		}
#endif // Mejoras


	//- ActualizarEstados(): modifica el estado de los sensores en función de los valores y los umbrales
		void ActualizarEstados() {
	        //- Determinar el estado de la iluminación
		        if (Valores[SEN_IluEx] >= UMBRAL_CLARIDAD) {
		        	Estados[SEN_IluEx] = ST_CLARIDAD;
		        } else if (Valores[SEN_IluEx] >= UMBRAL_OSCURIDAD) {
		        	Estados[SEN_IluEx] = ST_LUZTENUE;
		        } else {
		        	Estados[SEN_IluEx] = ST_OSCURIDAD;
		        }

	        //- Determinar el estado de la temperatura interior
		        if (Valores[SEN_TemIn] < UMBRAL_CALEF) {
		        	Estados[SEN_TemIn] = ST_HACEFRIO;
		        } else if (Valores[SEN_TemIn] > UMBRAL_AIREA) {
		        	Estados[SEN_TemIn] = ST_HACECALOR;
		        } else {
		        	Estados[SEN_TemIn] = ST_HACEBUENO;
		        }

	        //- Determinar el estado de la temperatura exterior
		        if (Valores[SEN_TemEx] < UMBRAL_CALEF) {
		        	Estados[SEN_TemEx] = ST_HACEFRIO;
		        } else if (Valores[SEN_TemEx] > UMBRAL_AIREA) {
		        	Estados[SEN_TemEx] = ST_HACECALOR;
		        } else {
		        	Estados[SEN_TemEx] = ST_HACEBUENO;
		        }

	        //- Determinar el estado del nivel de ruido
		        if (Valores[SEN_Ruido] < UMBRAL_RUIDO) {
		        	Estados[SEN_Ruido] = ST_SILENCIO;
		        } else
		        	Estados[SEN_Ruido] = ST_HAYRUIDO;
		}

	//- SimularSensores: modifica el valor de los sensores a petición del usuario
		void SimularSensores() {

	    	//- Si se pulsó algún botón, mostrarlo como si se hubiera pulsado una tecla
	    		if (ui.sig_tecla != '\0') {
	    			ui.ult_tecla = ui.sig_tecla;
	    		}

	    	//- Si no se pulsó ningún botón, intentar leer una nueva tecla del puerto serie
				else {
	    			//- Lectura del puerto serie
	                	static char rx_buf[2];
	                	static u32 numRecv;
	                	numRecv = XIOModule_Recv(&iomodule, (u8 *)rx_buf, 1);

	                //- Si hay datos, actualizar la última tecla pulsada y convertirla a mayúsculas
						if (numRecv != 0) {
							ui.ult_tecla = rx_buf[0];
							if (ui.ult_tecla >='a') {
								ui.sig_tecla = ui.ult_tecla - 0x20;
							} else {
								ui.sig_tecla = ui.ult_tecla;
							}
						}
				}

	    	//- Si no se ha pulsado ninguna tecla o botón, salir sin cambios
	    		if (ui.sig_tecla == '\0') {
	    			return;
	    		}

			//- Actualizar los semáforos
	    		Tem.sema_actu = 1; 	// Si cambió algún sensor, hay que recalcular los actuadores
  				Tem.sema_pant = 1;  // Como se ha pulsado una tecla, hay que actualizar la pantalla

#ifdef MEJORAS
			//- Tratamiento de los botones/teclas de dirección
	            if ((ui.sig_tecla==TECLA_IZQ) || (ui.sig_tecla==TECLA_DER) || (ui.sig_tecla==TECLA_ARR) || (ui.sig_tecla==TECLA_ABA)) {

	            	//- Cambiar el número de sensor/actuador activo con las teclas de izquierda y derecha
						if (ui.sig_tecla==TECLA_IZQ && ui.modo_sensores) {
							ui.sen_activo = (ui.sen_activo==SEN_Prese) ? SEN_Ruido : ui.sen_activo - 1;
						} else if (ui.sig_tecla==TECLA_IZQ) { //  && !modo_sensores)
							ui.act_activo = (ui.act_activo==ACT_Luces) ? ACT_AireA : ui.act_activo - 1;
						} else if (ui.sig_tecla == TECLA_DER && ui.modo_sensores) {
							ui.sen_activo = (ui.sen_activo==SEN_Ruido) ? SEN_Prese : ui.sen_activo + 1;
						} else if (ui.sig_tecla == TECLA_DER) { // && !modo_sensores
							ui.act_activo = (ui.act_activo==ACT_AireA) ? ACT_Luces : ui.act_activo + 1;
						}

					//- Simular la tecla para incrementar el sensor dependiendo de qué sensor está activo
						if (ui.sig_tecla==TECLA_ARR && ui.modo_sensores) {
							ui.sig_tecla = TeclasArriba[ui.sen_activo];
						}

					//- Simular la tecla para decrementar el sensor dependiendo de qué sensor está activo
						else if (ui.sig_tecla==TECLA_ABA && ui.modo_sensores) {
							ui.sig_tecla = TeclasAbajo[ui.sen_activo];
						}
	            } // teclas de dirección
#endif // Mejoras

			//- Actualizamos sensores según la tecla pulsada o los botones equivalentes
	            switch (ui.sig_tecla) {

	            	//-  U1. CONTROL DE SENSORES POR TECLADO
		            	case 'R': if (Valores[SEN_IluEx] < MAX_LUZEX) Valores[SEN_IluEx]++; break; // subir luz exterior
		            	case 'F': if (Valores[SEN_IluEx] > MIN_LUZEX) Valores[SEN_IluEx]--; break; // bajar luz exterior
		            	case 'Q': if (Valores[SEN_TemEx] < MAX_TEMPE) Valores[SEN_TemEx]++; break; // subir temperatura exterior
		            	case 'A': if (Valores[SEN_TemEx] > MIN_TEMPE) Valores[SEN_TemEx]--; break; // bajar temperatura exterior
		            	case 'W': if (Valores[SEN_TemIn] < MAX_TEMPE) Valores[SEN_TemIn]++; break; // subir temperatura exterior
		            	case 'S': if (Valores[SEN_TemIn] > MIN_TEMPE) Valores[SEN_TemIn]--; break; // bajar temperatura exterior
		            	case 'E': if (Valores[SEN_Ruido] < MAX_RUIDO) Valores[SEN_Ruido]++; break; // subir nivel de ruido
		            	case 'D': if (Valores[SEN_Ruido] > MIN_RUIDO) Valores[SEN_Ruido]--; break; // bajar nivel de ruido

		            //- R1. CAMBIO SENSOR PRESENCIA EN 5 SEGUNDOS
		            	case 'P':
							ui.sig_presencia = (ui.sig_presencia==ST_PRESENTE) ? ST_AUSENTE : ST_PRESENTE; // siguiente estado de presencia
							Tem.tics_pres = 0; // cada vez que se pulse P, inicializar el timer de espera de 5 segundos
							break;
	            }

	        //- Actualiza el estado de los sensores
	            ActualizarEstados();

			//- Reseteamos la última tecla para la siguiente iteración
				ui.sig_tecla = '\0';

	    } // SimularSensores



//==================================== GESTIÓN DE LA PANTALLA

	//- EstadoMotores: Visualiza "Motor al X%" o espacios si el motor está apagado
	    void ImprimirPotencia(u8 iSenAct) {
	    	//- U2c. MOVIMIENTO VENTANAS Y PERSIANAS
		    	if (iSenAct >= ACT_Venta && iSenAct <= ACT_AireA) {
		    		if (Valores[iSenAct] == 0) {
		    			xil_printf("                 ");
		    		} else {
		    			xil_printf(" (motores al %d %%)  ", Valores[iSenAct]);
		    		}
		    	}
	    }

	//- RefrecarPantalla: Actualiza la pantalla sólo si el semáforo indica que hubo algún cambio
        //    U2. En la pantalla se mostrará toda la información del sistema,
        //       que incluye el valor de todos los sensores,
        //       así como los sistemas que accionamos para el control de la vivienda, con sus unidades respectivas.
        //
        //    Cada vez que el usuario modifique algún valor del sensor,
        //       o bien debido a un cambio en el sistema
        //    	 por tiempo o por autoincremento/autodecremento de la temperatura,
        //    se recalcularán los valores necesarios y se volverá a imprimir toda la información en pantalla.
        //
        //    En el caso de las persianas y ventanas, será necesario mostrar tanto si están abiertas o cerradas,
        //       así como el % de funcionamiento del motor si se está moviendo;
        //       en este último caso, indicar también si la ventana o persiana estaría abriéndose o cerrándose.
        //    Inicialmente se encontrará todo cerrado.
		void RefrecarPantalla() {

			//- Omitir el refresco si el semáforo está apagado o no ha pasado suficiente tiempo desde la última vez
				if (!Tem.sema_pant || Tem.tics_pant < TICS_PANTALLA)
					return;

			//- Actualizar el semáforo, el número de tics desde el último refresco y el número de ejecuciones
				Tem.sema_pant = 0;
				Tem.tics_pant = 0;
				Tem.ejec_pant++;

			//- Leer el estado de los switches para saber si estamos en modo sensores o modo actuadores
				ui.modo_sensores = (XIOModule_DiscreteRead(&iomodule, GPI_SWITCHES) & MASK_SEN);

			//- Actualizar los leds y el valor a mostrar en la placa display dependiendo del sensor/actuador activo
				if (ui.modo_sensores) {
					XIOModule_DiscreteWrite(&iomodule, GPO_LEDS,  MASK_SEN | (0x1 << (SEN_Ruido-ui.sen_activo)));
					XIOModule_DiscreteWrite(&iomodule, GPO_BCDS, 0xd000 | (ui.sen_activo << 8) | Valores[ui.sen_activo]);
				} else {
					XIOModule_DiscreteWrite(&iomodule, GPO_LEDS,  MASK_ACT | (0x1 << (ACT_AireA-ui.act_activo)));
					XIOModule_DiscreteWrite(&iomodule, GPO_BCDS, 0xA000 | (ui.act_activo << 8) | Valores[ui.act_activo]);
				}

			//- Mover el cursor al inicio e indicar la tecla pulsada
	            xil_printf("\033[H");
	            xil_printf("\n\rTecla pulsada='%c'  ", ui.ult_tecla);
	            xil_printf("\n\rEjecuciones: Control=%d, FPGA=%d, Pantalla=%d", Tem.ejec_actu, Tem.ejec_fpga, Tem.ejec_pant);

			//- U2a. CONTENIDO PANTALLA
	            u8 iSenAct;
	            char marca_activo;
	            for (iSenAct = 0; iSenAct < NUM_SEN_ACT ; iSenAct++) {
	            	marca_activo = (ui.sen_activo==iSenAct || ui.act_activo==iSenAct) ? '*' : ' '; // si está activo marca con *
	            	xil_printf(Formatos[iSenAct], marca_activo, Decod_estado[Estados[iSenAct]], Valores[iSenAct]);
	            	ImprimirPotencia(iSenAct); // opcionalmente, imprime motor al X %
	            }

	        //- Volcar la pantalla
	            xil_printf("\t");

	    } // RefrecarPantalla





//==================================== GESTIÓN DEL TEMPORIZADOR

	//- Manejador_Temporizador: interrupciones del temporizador FIT1, programado a 0.1 segundos
		// R3b La idea es que el proceso de abrir o cerrar persianas o ventanas se complete en 10 segundos,
		//     comenzando y terminando con movimientos lentos del motor (poca potencia),
		//     y estando al 100% de potencia a mitad del recorrido.
		void Manejador_Temporizador (void* ref)	{

			//- activar el semáforo para ejecutar la lógica del temporizador
            	Tem.sema_temp = 1;

            //- Incrementar los números de tics
	        	Tem.tics_pant++;
            	Tem.tics_pres++;
            	Tem.tics_auto++;

            //- Incrementar/decrementar el grado de apertura de las ventanas
            	if (Estados[ACT_Venta]==ST_ABRIENDO && Tem.grad_vent<GRAD_MAX_APERTURA) {
            		Tem.grad_vent++;
            	} else if (Estados[ACT_Venta]==ST_CERRANDO && Tem.grad_vent>GRAD_MIN_APERTURA) {
            		Tem.grad_vent--;
            	}

            //- Incrementar/decrementar el grado de apertura de las persianas
            	if (Estados[ACT_Persi]==ST_SUBIENDO && Tem.grad_pers<GRAD_MAX_APERTURA) {
            		Tem.grad_pers++;
            	} else if (Estados[ACT_Persi]==ST_BAJANDO && Tem.grad_pers>GRAD_MIN_APERTURA) {
            		Tem.grad_pers--;
            	}

	    } // Manejador_Temporizador



	//- ActualizarPorTiemo: ajusta sensores y actuadores periódicamente
		void ActualizarPorTiemo() {

			//- Si el semáforo está desactivado, volver sin hacer nada
				if (!Tem.sema_temp) {
					return;
				}

			//- Desactivar el semáforo hasta la siguiente interrupción
				Tem.sema_temp = 0;

			//- Si ha cambiado el switch de modo sensores/actuadores, actualizar la variable y refrescar la pantalla
        		u8 modo_sensores;
				modo_sensores = (XIOModule_DiscreteRead(&iomodule, GPI_SWITCHES) & 0x80);
				if (ui.modo_sensores != modo_sensores) {
					ui.modo_sensores = modo_sensores;
					Tem.sema_pant = 1;
				}

			//- R1. CAMBIO SENSOR PRESENCIA EN 5 SEGUNDOS
				if (Estados[SEN_Prese]!=ui.sig_presencia && Tem.tics_pres >= TICS_PRESENCIA_5SEG) {
					Estados[SEN_Prese] = ui.sig_presencia;
					Valores[SEN_Prese] = (Estados[SEN_Prese]==ST_PRESENTE) ? 0xFF : 0;
					Tem.sema_actu = 1;
					Tem.tics_pres = 0;
				}

			//- si las ventanas se están moviendo, actualizar la pantalla y comprobar si llegaron a final de recorrido
				if (Estados[ACT_Venta]==ST_ABRIENDO || Estados[ACT_Venta]==ST_CERRANDO) {
					Tem.sema_pant = 1;
					if (Tem.grad_vent == GRAD_MAX_APERTURA) {
						Estados[ACT_Venta] = ST_ABIERTAS;
						Valores[ACT_Venta] = 0;
						Tem.sema_actu = 1;
					} else if (Tem.grad_vent == GRAD_MIN_APERTURA) {
						Estados[ACT_Venta] = ST_CERRADAS;
						Valores[ACT_Venta] = 0;
						Tem.sema_actu = 1;
					} else if (Tem.grad_vent <= GRAD_MED_APERTURA) { // entre 0 y 100 (0% a 50% de apertura), la potencia es ascendente
						Valores[ACT_Venta] = Tem.grad_vent;
					}
					else { // entre 101 y 200 (50% a 100% de apertura), la potencia es descendente
						Valores[ACT_Venta] = GRAD_MAX_APERTURA - Tem.grad_vent;
					}
				} // (Estados[ACT_Venta]==ST_ABRIENDO || Estados[ACT_Venta]==ST_CERRANDO)

			//- si las persianas se están moviendo, actualizar la pantalla y comprobar si llegaron a final de recorrido
				if (Estados[ACT_Persi]==ST_SUBIENDO || Estados[ACT_Persi]==ST_BAJANDO) {
					Tem.sema_pant = 1;
					if (Tem.grad_pers == GRAD_MAX_APERTURA) {
						Estados[ACT_Persi] = ST_SUBIDAS;
						Valores[ACT_Persi] = 0;
						Tem.sema_actu = 1;
					} else if (Tem.grad_pers == GRAD_MIN_APERTURA) {
						Estados[ACT_Persi] = ST_BAJADAS;
						Valores[ACT_Persi] = 0;
						Tem.sema_actu = 1;
					} else if (Tem.grad_pers <= GRAD_MED_APERTURA) { // entre 0 y 100 (0% a 50% de apertura), la potencia es ascendente
						Valores[ACT_Persi] = Tem.grad_pers;
					}
					else { // entre 101 y 200 (50% a 100% de apertura), la potencia es descendente
						Valores[ACT_Persi] = GRAD_MAX_APERTURA - Tem.grad_pers;
					}
				} // (Estados[ACT_Persi]==ST_SUBIENDO || Estados[ACT_Persi]==ST_BAJANDO)


			//- R6. Igualmente, el alumno deberá implementar en el MicroBlaze un sistema lógico de “autoincrementos” o “autodecrementos”
				//  cada cierto tiempo en la temperatura interior de la vivienda en caso de abrirse las ventanas y persianas para adecuar la temperatura interna a la externa
			    //  o cuando se activa la calefacción o el aire acondicionado,
				//  llegando a la temperatura objetivo (18°C en el caso de ser necesario calentar la vivienda y 23°C en el caso de tener que enfriarla).
				if (Tem.tics_auto >= TICS_AUTOINCREMENTO) {
					//- Resetear el temporizador e inicilizar el valor de la siguiente temperatura interior
						Tem.tics_auto = 0;
						u8 Nueva_temperatura;
						Nueva_temperatura = Valores[SEN_TemIn];

					//- Con las ventanas abiertas y diferencia de temperaturas, la temperatura subirá o bajará 1 grado
						if (Estados[ACT_Venta]==ST_ABIERTAS && Valores[SEN_TemIn]!=Valores[SEN_TemEx]) {
							Nueva_temperatura += (Valores[SEN_TemIn] < Valores[SEN_TemEx]) ? 1 : -1;
						}

					//- Con la calefacción encendida, la temperatura sube 2 grados
						if (Valores[ACT_Calef] > 0) {
							Nueva_temperatura += 2;
						}

					//- Con el aire encendido, la temperatura baja 2 grados
						else if (Valores[ACT_AireA] > 0) {
							Nueva_temperatura -=2;
						}

					//- Si la nueva temperatura cambia, actualizar la temperatura interior y activar el semáforo de actuadores
						if (Valores[SEN_TemIn] != Nueva_temperatura) {
							Valores[SEN_TemIn] = Nueva_temperatura;
							Tem.sema_actu = 1;
						}
				}	// Tem.tics_auto >= TICS_AUTOINCREMENTO
			//- Actualiza el estado de los sensores
				ActualizarEstados();

		} // ActualizarPorTiemo






//---------------------------------------------------------------------


//==================================== INICIALIZACIÓN

	void Inicializar() {
		//- Inicializa el micro
	        init_platform();

	    //- Inicializa el módulo de GPI, GPO y la UART para obtener la dirección base:
	        u32 res; // resultado de llamadas a Xilinx
	    	res = XIOModule_Initialize(&iomodule, XPAR_IOMODULE_0_DEVICE_ID);
	    	res = XIOModule_Start(&iomodule);
	    	res = XIOModule_CfgInitialize(&iomodule, NULL, 1);

	    //- Inicializamos el manejador de interrupciones
	    	microblaze_register_handler(XIOModule_DeviceInterruptHandler, XPAR_IOMODULE_0_DEVICE_ID);

	    //- Registramos y activamos las interrupciones del temporizador para FIT1 (temporizador a 1 segundo)
	    	XIOModule_Connect(&iomodule, XIN_IOMODULE_FIT_1_INTERRUPT_INTR, Manejador_Temporizador, NULL);
	    	XIOModule_Enable(&iomodule, XIN_IOMODULE_FIT_1_INTERRUPT_INTR);
	#ifdef MEJORAS
	    //- Registramos y activamos las interrupciones botón derecho e izquierdo (Interrupciones externa 0 y 1)
	    	XIOModule_Connect(&iomodule, INTERRUPCION_BOTON_DER, Manejador_BotonDer, NULL);
	    	XIOModule_Connect(&iomodule, INTERRUPCION_BOTON_IZQ, Manejador_BotonIzq, NULL);
	    	XIOModule_Connect(&iomodule, INTERRUPCION_BOTON_ARR, Manejador_BotonArr, NULL);
	    	XIOModule_Connect(&iomodule, INTERRUPCION_BOTON_ABA, Manejador_BotonAba, NULL);

	    	XIOModule_Enable(&iomodule, INTERRUPCION_BOTON_DER);
	    	XIOModule_Enable(&iomodule, INTERRUPCION_BOTON_IZQ);
	    	XIOModule_Enable(&iomodule, INTERRUPCION_BOTON_ARR);
	    	XIOModule_Enable(&iomodule, INTERRUPCION_BOTON_ABA);
	#endif // mejoras

	    //- Registramos y activamos la interrupción de la respuesta de potencia de climatización
	    	XIOModule_Connect(&iomodule, INTERRUPCION_POTENCIA_U, Manejador_Pot_Clim, NULL);
	    	XIOModule_Enable(&iomodule, INTERRUPCION_POTENCIA_U);

		//- Activamos Interrupciones
			microblaze_enable_interrupts();

		//- Retardo necesario para que el Remote Lab se configure correctamente antes de operar con la E/S del MicroBlaze
			u32 index2;
			for (index2 = 0; index2 < 6000000; index2 ++)
				;
			xil_printf("\t");

		//- Valores a cero e inicialización de sensores
			memset((void *)&Valores, 0, sizeof(Valores));
			Valores[SEN_IluEx] = 75;
			Valores[SEN_TemIn] = 20;
			Valores[SEN_TemEx] = 20;
			Valores[SEN_Ruido] = 20;

		//- U2d. Inicialmente se encontrará todo cerrado.
			Estados[SEN_Prese] = ST_AUSENTE;

		//- número de sensor y de actuador activo
			ui.sen_activo = SEN_Prese;
			ui.act_activo = ACT_Luces;

		//- potencia de motores
			Act_pot_clima = 0;

		//- Inicializar los sensores
			ui.sen_activo = 0;
			ui.sig_presencia = ST_AUSENTE;
			ui.ult_tecla = ' ';
			ui.sig_tecla = '\0';

		//- Temporizadores
			memset((void *)&Tem, 0, sizeof(st_Temporizador));
			Tem.sema_actu = 1;
			Tem.sema_pant = 1;

		} // Inicializar

//==================================== MAIN
	int main()
	{
		//- Inicialización de la placa
			Inicializar();

		//- Bucle principal
			while (1)
			{
				//- Leer el teclado para simular los cambios en los sensores
					SimularSensores();

				//- Si saltó la interrupción del temporizador, actualizar sensores y actuadores
					ActualizarPorTiemo();

				//- Si se pulsaron teclas o se modificó algo por tiempo, hay que controlar los actuadores
					ControlarActuadores();

				//- Si cambió algún dato, refrescar la pantalla
					RefrecarPantalla();

			} // while (1)

		//- Finalización (código no alcanzable)
			cleanup_platform();
			return 0;

	} // main

// source ipcore_dir/microblaze_mcs_setup.tcl
// microblaze_mcs_data2mem workspace/hello_world/debug/hello_world.elf
